USE [ClientDB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [Tender].[TENDER_SAVE]
	@ID			UNIQUEIDENTIFIER OUTPUT,
	@CLIENT		INT,
	@CL_NAME	NVARCHAR(256),
	@LAW		UNIQUEIDENTIFIER,
	@CON_START	SMALLDATETIME,
	@CON_FINISH	SMALLDATETIME,
	@ACT_START	SMALLDATETIME,
	@ACT_FINISH	SMALLDATETIME,
	@TEN_START	SMALLDATETIME,
	@TEN_FINISH	SMALLDATETIME,
	@SURNAME	NVARCHAR(128),
	@NAME		NVARCHAR(128),
	@PATRON		NVARCHAR(128),
	@POSITION	NVARCHAR(256),
	@PHONE		NVARCHAR(128),
	@EMAIL		NVARCHAR(256),
	@CALL_DATE	SMALLDATETIME,
	@STATUS		UNIQUEIDENTIFIER,
	@MANAGER	BIT,
	@MAN_DATE	SMALLDATETIME,
	@ID_MANAGER	INT,
	@MAN_NOTE	NVARCHAR(MAX),
	@LET_NUM	NVARCHAR(64) = NULL,
	@LET_DATE	SMALLDATETIME = NULL
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE
		@DebugError		VarChar(512),
		@DebugContext	Xml,
		@Params			Xml;

	EXEC [Debug].[Execution@Start]
		@Proc_Id		= @@ProcId,
		@Params			= @Params,
		@DebugContext	= @DebugContext OUT

	BEGIN TRY

		IF @ID IS NULL
		BEGIN
			DECLARE @TBL TABLE(ID UNIQUEIDENTIFIER)

			IF @STATUS IS NULL
				INSERT INTO Tender.Tender(ID_CLIENT, ID_LAW, CLIENT, CONTRACT_START, CONTRACT_FINISH, ACT_START, ACT_FINISH, TENDER_START, TENDER_FINISH, SURNAME, NAME, PATRON, POSITION, PHONE, EMAIL, ID_STATUS, CALL_DATE, MANAGER, MANAGER_DATE, ID_MANAGER, MANAGER_NOTE, LET_NUM, LET_DATE)
					OUTPUT inserted.ID INTO @TBL
					SELECT @CLIENT, @LAW, @CL_NAME, @CON_START, @CON_FINISH, @ACT_START, @ACT_FINISH, @TEN_START, @TEN_FINISH, @SURNAME, @NAME, @PATRON, @POSITION, @PHONE, @EMAIL, ID, @CALL_DATE, @MANAGER, @MAN_DATE, @ID_MANAGER, @MAN_NOTE, @LET_NUM, @LET_DATE
					FROM Tender.Status
					WHERE PSEDO = 'PLAN'
			ELSE
				INSERT INTO Tender.Tender(ID_CLIENT, ID_LAW, CLIENT, CONTRACT_START, CONTRACT_FINISH, ACT_START, ACT_FINISH, TENDER_START, TENDER_FINISH, SURNAME, NAME, PATRON, POSITION, PHONE, EMAIL, ID_STATUS, CALL_DATE, MANAGER, MANAGER_DATE, ID_MANAGER, MANAGER_NOTE, LET_NUM, LET_DATE)
					OUTPUT inserted.ID INTO @TBL
					SELECT @CLIENT, @LAW, @CL_NAME, @CON_START, @CON_FINISH, @ACT_START, @ACT_FINISH, @TEN_START, @TEN_FINISH, @SURNAME, @NAME, @PATRON, @POSITION, @PHONE, @EMAIL, @STATUS, @CALL_DATE, @MANAGER, @MAN_DATE, @ID_MANAGER, @MAN_NOTE, @LET_NUM, @LET_DATE


			SELECT @ID = ID FROM @TBL
		END
		ELSE
		BEGIN
			UPDATE Tender.Tender
			SET ID_LAW			=	@LAW,
				CLIENT			=	@CL_NAME,
				CONTRACT_START	=	@CON_START,
				CONTRACT_FINISH	=	@CON_FINISH,
				ACT_START		=	@ACT_START,
				ACT_FINISH		=	@ACT_FINISH,
				TENDER_START	=	@TEN_START,
				TENDER_FINISH	=	@TEN_FINISH,
				SURNAME			=	@SURNAME,
				NAME			=	@NAME,
				PATRON			=	@PATRON,
				POSITION		=	@POSITION,
				PHONE			=	@PHONE,
				EMAIL			=	@EMAIL,
				CALL_DATE		=	@CALL_DATE,
				ID_STATUS		=	@STATUS,
				MANAGER			=	@MANAGER,
				MANAGER_DATE	=	@MAN_DATE,
				ID_MANAGER		=	@ID_MANAGER,
				MANAGER_NOTE	=	@MAN_NOTE,
				LET_NUM			=	@LET_NUM,
				LET_DATE		=	@LET_DATE
			WHERE ID = @ID
		END

		DECLARE @MANAGER_LOGIN NVARCHAR(128)

		SELECT @MANAGER_LOGIN = ManagerLogin
		FROM dbo.ManagerTable
		WHERE ManagerID = @ID_MANAGER

		IF @MANAGER = 1
		BEGIN
			DECLARE @CONDITION NVARCHAR(MAX)

			SET @CONDITION = 'Прошу до ' + CONVERT(NVARCHAR(32), @MAN_DATE, 108) + ' ' + CONVERT(NVARCHAR(32), @MAN_DATE, 104) +
			  ' для ' + @CL_NAME + ' подготовить и предоставить согласованный расчет стоимости информационный услуг на ' +
			  'сопровождаемый комплект систем КонсультантПлюс для подготовки и отправления коммерческих предложений ' + CHAR(10) + CHAR(10) + CHAR(13) + ISNULL(@MAN_NOTE, '')

			--EXEC dbo.CLIENT_MESSAGE_SEND @CLIENT, 1, @MANAGER_LOGIN, @CONDITION, 0

			INSERT INTO dbo.ClientMessage(ID_CLIENT, TP, DATE, NOTE, RECEIVE_USER, HARD_READ)
				SELECT @CLIENT, 1, GETDATE(), @CONDITION, @MANAGER_LOGIN, 0
				WHERE NOT EXISTS
					(
						SELECT *
						FROM dbo.ClientMessage
						WHERE ID_CLIENT = @CLIENT
							AND dbo.DateOf(DATE) = dbo.Dateof(GETDATE())
							AND NOTE = @CONDITION
							AND @MANAGER_LOGIN = RECEIVE_USER
							AND TP = 1
					)
		END

		EXEC [Debug].[Execution@Finish] @DebugContext = @DebugContext, @Error = NULL;
	END TRY
	BEGIN CATCH
		SET @DebugError = Error_Message();

		EXEC [Debug].[Execution@Finish] @DebugContext = @DebugContext, @Error = @DebugError;

		EXEC [Maintenance].[ReRaise Error];
	END CATCH
END
GO
GRANT EXECUTE ON [Tender].[TENDER_SAVE] TO rl_tender_u;
GO
