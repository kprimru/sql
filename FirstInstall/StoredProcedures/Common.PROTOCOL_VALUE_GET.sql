USE [FirstInstall]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [Common].[PROTOCOL_VALUE_GET]
	@REFERENCE	VARCHAR(50),
	@ID			UNIQUEIDENTIFIER,
	@RESULT		VARCHAR(MAX) OUTPUT
WITH EXECUTE AS OWNER
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @SQL NVARCHAR(MAX)

	DECLARE @SCHEMA VARCHAR(50)
	DECLARE @VIEW VARCHAR(50)
	DECLARE @KEY VARCHAR(50)

	SELECT @SCHEMA = REF_SCHEMA, @VIEW = REF_VIEW,
		@KEY = CASE REF_REF WHEN 1 THEN ISNULL(REF_MASTER_KEY, REF_KEY) ELSE REF_KEY END
	FROM Meta.Reference
	WHERE REF_NAME = @REFERENCE

	IF OBJECT_ID('tempdb..#columns') IS NOT NULL
		DROP TABLE #columns
	IF OBJECT_ID('tempdb..#values') IS NOT NULL
		DROP TABLE #values

	CREATE TABLE #columns
		(
			CNAME VARCHAR(100),
			CCAPTION VARCHAR(100),
			CPOS INT,
			DATA_TYPE VARCHAR(50)
		)
	CREATE TABLE #values
		(
			VAL VARCHAR(MAX),
			VPOS INT
		)

	INSERT INTO #columns
		SELECT COLUMN_NAME, FL_CAPTION, ORDINAL_POSITION, DATA_TYPE
		FROM
			INFORMATION_SCHEMA.COLUMNS INNER JOIN
			Meta.Fields ON FL_NAME = COLUMN_NAME
		WHERE TABLE_SCHEMA = @SCHEMA
			AND TABLE_NAME = @VIEW
			AND (FL_VISIBLE = 1 OR FL_NAME = 'ID_COLOR')


	SET @SQL = ''

	SELECT @SQL = @SQL + '
		DECLARE @' + CNAME + ' VARCHAR(MAX)'
	FROM #COLUMNS

	SET @SQL = @SQL + '
		SELECT
	'

	SELECT @SQL = @SQL + '
		@' + CNAME + ' = ISNULL(' +
			CASE DATA_TYPE
				WHEN 'SMALLDATETIME' THEN 'CONVERT(VARCHAR(20), ' + CNAME + ', 104)'
				WHEN 'DATETIME' THEN 'CONVERT(VARCHAR(20), ' + CNAME + ', 104)'
				ELSE 'CONVERT(VARCHAR(MAX), ' + CNAME + ')'
			END + ', ''''),'
	FROM
		#COLUMNS

	SET @SQL = LEFT(@SQL, LEN(@SQL) - 1)

	SET @SQL = @SQL + '
		FROM [' + @SCHEMA + '].[' + @VIEW + ']
		WHERE ' + @KEY + ' = ''' + CONVERT(VARCHAR(50), @ID) + ''''


	SET @SQL = @SQL + '

		INSERT INTO #values'

	SELECT @SQL = @SQL + '
		SELECT @' + CNAME + ', ' + CONVERT(VARCHAR(20), CPOS) + '
		UNION ALL'
	FROM #COLUMNS

	SET @SQL = LEFT(@SQL, LEN(@SQL) - 9)

	SET @SQL = @SQL + '
		DECLARE @CMAX INT
		DECLARE @VMAX INT

		SELECT @CMAX = MAX(LEN(CCAPTION))
		FROM #COLUMNS

		SELECT @VMAX = MAX(LEN(VAL))
		FROM #VALUES

		SET @RESULT = ''+'' + REPLICATE(''-'', @CMAX) + ''+'' + REPLICATE(''-'', @VMAX) + ''+
''

		DECLARE TTT CURSOR LOCAL FOR
			SELECT ''|'' + CCAPTION + REPLICATE('' '', @CMAX - LEN(CCAPTION)) + ''|'' + VAL + REPLICATE('' '', @VMAX - LEN(VAL)) + ''|
''
			FROM
				#VALUES INNER JOIN
				#COLUMNS ON CPOS = VPOS
			ORDER BY CPOS

		OPEN TTT

		DECLARE @TXT VARCHAR(MAX)

		FETCH NEXT FROM TTT INTO @TXT

		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @RESULT = @RESULT + @TXT

			FETCH NEXT FROM TTT INTO @TXT
		END

		CLOSE TTT
		DEALLOCATE TTT

		SET @RESULT = @RESULT + ''+'' + REPLICATE(''-'', @CMAX) + ''+'' + REPLICATE(''-'', @VMAX) + ''+''
'

	EXEC sp_executesql @SQL, N'@RESULT VARCHAR(MAX) OUTPUT', @RESULT OUTPUT

	IF OBJECT_ID('tempdb..#columns') IS NOT NULL
		DROP TABLE #columns
	IF OBJECT_ID('tempdb..#values') IS NOT NULL
		DROP TABLE #values
END
