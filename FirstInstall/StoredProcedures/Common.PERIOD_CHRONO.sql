USE [FirstInstall]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[Common].[PERIOD_CHRONO]', 'P ') IS NULL EXEC('CREATE PROCEDURE [Common].[PERIOD_CHRONO]  AS SELECT 1')
GO
ALTER PROCEDURE [Common].[PERIOD_CHRONO]
	@PR_NAME		VARCHAR(50),
	@PR_BEGIN_DATE	SMALLDATETIME,
	@PR_END_DATE	SMALLDATETIME,
	@PR_DATE		SMALLDATETIME,
	@PR_ID_MASTER	UNIQUEIDENTIFIER,
	@PR_END			SMALLDATETIME,
	@PR_ID			UNIQUEIDENTIFIER = NULL OUTPUT
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @OLD	VARCHAR(MAX)
	DECLARE @NEW	VARCHAR(MAX)

	EXEC Common.PROTOCOL_VALUE_GET 'PERIOD', @PR_ID_MASTER, @OLD OUTPUT



	DECLARE @TBL TABLE(ID UNIQUEIDENTIFIER)
	DECLARE @MASTERID UNIQUEIDENTIFIER


	BEGIN TRANSACTION

	BEGIN TRY
		UPDATE	Common.PeriodDetail
		SET		PR_END	=	@PR_END,
				PR_REF	=	2
		WHERE	PR_ID	=	@PR_ID

		UPDATE	Common.Period
		SET		PRMS_LAST	=	GETDATE()
		WHERE	PRMS_ID		=	@PR_ID_MASTER

		INSERT INTO
				Common.PeriodDetail(
					PR_ID_MASTER,
					PR_NAME,
					PR_BEGIN_DATE,
					PR_END_DATE,
					PR_DATE
				)
		OUTPUT INSERTED.PR_ID INTO @TBL
		VALUES	(
					@PR_ID_MASTER,
					@PR_NAME,
					@PR_BEGIN_DATE,
					@PR_END_DATE,
					@PR_DATE
				)

		SELECT	@PR_ID	=	ID
		FROM	@TBL
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
	        ROLLBACK TRANSACTION
	END CATCH

	IF @@TRANCOUNT > 0
        COMMIT TRANSACTION


	EXEC Common.PROTOCOL_VALUE_GET 'PERIOD', @PR_ID_MASTER, @NEW OUTPUT

	EXEC Common.PROTOCOL_INSERT 'PERIOD', 'Хронологическое изменение', @PR_ID_MASTER, @OLD, @NEW
END

GO
GRANT EXECUTE ON [Common].[PERIOD_CHRONO] TO rl_period_u;
GO
