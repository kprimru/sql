USE [SaleDB]
	GO
	SET ANSI_NULLS ON
	GO
	SET QUOTED_IDENTIFIER ON
	GO
	CREATE PROCEDURE [Client].[COMPANY_ARCHIEVE]
	@ID	UNIQUEIDENTIFIER
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		BEGIN TRAN Company
		DECLARE @CMP TABLE(ID UNIQUEIDENTIFIER)

		DECLARE @COMPANY	UNIQUEIDENTIFIER

		INSERT INTO Client.Company(
				ID_MASTER, SHORT, NAME, NUMBER, ID_PAY_CAT, ID_WORK_STATE, ID_POTENTIAL, ID_ACTIVITY, ACTIVITY_NOTE, 
				ID_SENDER, SENDER_NOTE, ID_NEXT_MON, WORK_DATE, DELETE_COMMENT, ID_AVAILABILITY, ID_TAXING, ID_WORK_STATUS, 
				STATUS, BDATE, EDATE, UPD_USER)
			OUTPUT inserted.ID INTO @CMP
			SELECT 
				@ID, SHORT, NAME, NUMBER, ID_PAY_CAT, ID_WORK_STATE, ID_POTENTIAL, ID_ACTIVITY, ACTIVITY_NOTE,
				ID_SENDER, SENDER_NOTE, ID_NEXT_MON, WORK_DATE, DELETE_COMMENT, ID_AVAILABILITY, ID_TAXING, ID_WORK_STATUS, 
				2, BDATE, GETDATE(), UPD_USER
			FROM Client.Company
			WHERE ID = @ID

		SELECT @COMPANY = ID FROM @CMP

		DECLARE @OFC TABLE (NEW_ID	UNIQUEIDENTIFIER, OLD_ID UNIQUEIDENTIFIER)

		INSERT INTO Client.Office(ID_MASTER, ID_COMPANY, SHORT, NAME, STATUS, BDATE, EDATE, UPD_USER)
			OUTPUT inserted.ID, inserted.ID_MASTER INTO @OFC(NEW_ID, OLD_ID)
			SELECT ID, @COMPANY, SHORT, NAME, 2, BDATE, GETDATE(), UPD_USER
			FROM Client.Office
			WHERE ID_COMPANY = @ID

		UPDATE Client.Office
		SET ID_MASTER = NULL
		WHERE ID_COMPANY = @COMPANY

		INSERT INTO Client.OfficeAddress(ID_MASTER, ID_OFFICE, ID_AREA, ID_STREET, [INDEX], HOME, ROOM, NOTE, BDATE, EDATE, STATUS, UPD_USER)
			SELECT 
				a.ID, c.NEW_ID, ID_AREA, ID_STREET, [INDEX], HOME, ROOM, NOTE, a.BDATE, GETDATE(), 2, a.UPD_USER
			FROM 
				Client.OfficeAddress a
				INNER JOIN Client.Office b ON a.ID_OFFICE = b.ID
				INNER JOIN @OFC c ON c.OLD_ID = b.ID
			WHERE b.ID_COMPANY = @ID

		UPDATE Client.OfficeAddress
		SET ID_MASTER = NULL
		WHERE ID_OFFICE IN (SELECT NEW_ID FROM @OFC)

		INSERT INTO Client.CompanyPhone(ID_MASTER, ID_COMPANY, ID_OFFICE, ID_TYPE, PHONE, PHONE_S, NOTE, BDATE, EDATE, STATUS, UPD_USER)
			SELECT a.ID, @COMPANY, b.NEW_ID, ID_TYPE, PHONE, PHONE_S, NOTE, BDATE, GETDATE(), 2, UPD_USER
			FROM 
				Client.CompanyPhone a
				LEFT OUTER JOIN @OFC b ON a.ID_OFFICE = b.OLD_ID
			WHERE a.ID_COMPANY = @ID

		UPDATE Client.CompanyPhone
		SET ID_MASTER = NULL
		WHERE ID_COMPANY = @COMPANY

		DECLARE @PERS TABLE (NEW_ID UNIQUEIDENTIFIER, OLD_ID UNIQUEIDENTIFIER)

		INSERT INTO Client.CompanyPersonal(ID_MASTER, ID_COMPANY, ID_OFFICE, SURNAME, NAME, PATRON, ID_POSITION, NOTE, BDATE, EDATE, STATUS, UPD_USER)
			OUTPUT inserted.ID, inserted.ID_MASTER INTO @PERS(NEW_ID, OLD_ID)
			SELECT ID, @COMPANY, b.NEW_ID, SURNAME, NAME, PATRON, ID_POSITION, NOTE, BDATE, GETDATE(), 2, UPD_USER
			FROM 
				Client.CompanyPersonal a
				INNER JOIN @OFC b ON a.ID_OFFICE = b.OLD_ID
			WHERE a.ID_COMPANY = @ID

		UPDATE Client.CompanyPersonal
		SET ID_MASTER = NULL
		WHERE ID_COMPANY = @COMPANY

		INSERT INTO Client.CompanyPersonalPhone(ID_PERSONAL, ID_TYPE, PHONE, PHONE_S, NOTE)
			SELECT b.NEW_ID, ID_TYPE, PHONE, PHONE_S, NOTE
			FROM 
				Client.CompanyPersonalPhone a
				INNER JOIN @PERS b ON a.ID_PERSONAL = b.OLD_ID

		INSERT INTO Client.CompanyProcess(ID_COMPANY, ID_PERSONAL, PROCESS_TYPE, BDATE, EDATE, ASSIGN_DATE, ASSIGN_USER, RETURN_DATE, RETURN_USER)
			SELECT @COMPANY, ID_PERSONAL, PROCESS_TYPE, BDATE, EDATE, ASSIGN_DATE, ASSIGN_USER, RETURN_DATE, RETURN_USER
			FROM Client.CompanyProcess
			WHERE ID_COMPANY = @ID

		INSERT INTO Client.CompanyRival(ID_COMPANY, ID_OFFICE, ID_RIVAL, INFO_DATE, NOTE, ACTIVE)
			SELECT @COMPANY, b.NEW_ID, ID_RIVAL, INFO_DATE, NOTE, ACTIVE
			FROM 
				Client.CompanyRival a
				LEFT OUTER JOIN @OFC b ON a.ID_OFFICE = b.OLD_ID
			WHERE a.ID_COMPANY = @ID

		INSERT INTO Client.CompanyTrust(ID_COMPANY, ID_OFFICE, DATE, TRUST, NOTE)
			SELECT @COMPANY, b.NEW_ID, DATE, TRUST, NOTE
			FROM 
				Client.CompanyTrust a
				LEFT OUTER JOIN @OFC b ON a.ID_OFFICE = b.OLD_ID
			WHERE a.ID_COMPANY = @ID

		/*
				и еще встречи прикрутить...
		*/

		COMMIT TRAN Company
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN Company
		DECLARE	@SEV	INT
		DECLARE	@STATE	INT
		DECLARE	@NUM	INT
		DECLARE	@PROC	NVARCHAR(128)
		DECLARE	@MSG	NVARCHAR(2048)

		SELECT 
			@SEV	=	ERROR_SEVERITY(),
			@STATE	=	ERROR_STATE(),
			@NUM	=	ERROR_NUMBER(),
			@PROC	=	ERROR_PROCEDURE(),
			@MSG	=	ERROR_MESSAGE()

		EXEC Security.ERROR_RAISE @SEV, @STATE, @NUM, @PROC, @MSG
	END CATCH
END