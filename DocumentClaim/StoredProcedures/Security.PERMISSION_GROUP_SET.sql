USE [DocumentClaim]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [Security].[PERMISSION_GROUP_SET]
	@ROLE	UNIQUEIDENTIFIER,
	@USER	NVARCHAR(128),
	@VAL	BIT
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		EXEC Maintenance.START_PROC @@PROCID

		DECLARE @RL TABLE (RL_NAME NVARCHAR(128))

		;WITH roles AS
			(
				SELECT ID, ID_MASTER, NAME
				FROM Security.Roles r
				WHERE ID = @ROLE

				UNION ALL

				SELECT t.ID, t.ID_MASTER, t.NAME
				FROM
					roles r
					INNER JOIN Security.Roles t ON r.ID = t.ID_MASTER
			)
			INSERT INTO @RL(RL_NAME)
				SELECT b.NAME
				FROM
					roles a
					--INNER JOIN Security.RoleCaptionView b ON a.ID = b.ID
					INNER JOIN Security.Roles b ON a.ID = b.ID
				WHERE b.NAME IS NOT NULL AND b.NAME <> ''

		DECLARE RL CURSOR LOCAL FOR
			SELECT RL_NAME
			FROM @RL

		OPEN RL

		DECLARE @ROLE_NAME NVARCHAR(128)

		FETCH NEXT FROM RL INTO @ROLE_NAME

		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @VAL = 1
				EXEC sp_addrolemember @ROLE_NAME, @USER
			ELSE
				EXEC sp_droprolemember @ROLE_NAME, @USER

			FETCH NEXT FROM RL INTO @ROLE_NAME
		END

		CLOSE RL
		DEALLOCATE RL

		EXEC Maintenance.FINISH_PROC @@PROCID
	END TRY
	BEGIN CATCH
		DECLARE	@SEV	INT
		DECLARE	@STATE	INT
		DECLARE	@NUM	INT
		DECLARE	@PROC	NVARCHAR(128)
		DECLARE	@MSG	NVARCHAR(2048)

		SELECT
			@SEV	=	ERROR_SEVERITY(),
			@STATE	=	ERROR_STATE(),
			@NUM	=	ERROR_NUMBER(),
			@PROC	=	ERROR_PROCEDURE(),
			@MSG	=	ERROR_MESSAGE()

		EXEC Maintenance.ERROR_RAISE @SEV, @STATE, @NUM, @PROC, @MSG
	END CATCH
END
GO
GRANT EXECUTE ON [Security].[PERMISSION_GROUP_SET] TO rl_user_permission_u;
GO
